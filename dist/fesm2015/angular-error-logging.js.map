{"version":3,"file":"angular-error-logging.js.map","sources":["ng://angular-error-logging/lib/error-logging-options.ts","ng://angular-error-logging/lib/js-error.ts","ng://angular-error-logging/lib/globals.ts","ng://angular-error-logging/lib/error-logging.service.ts","ng://angular-error-logging/lib/error-logging.handler.ts","ng://angular-error-logging/lib/error-logging.interceptor.ts","ng://angular-error-logging/lib/error-logging.module.ts"],"sourcesContent":["export class ErrorLoggingOptions {\n    appId: string;\n    access_token: string;\n    environment: any;\n    endpoint: string = 'https://dashboard.7dev.nl/api/logs';\n}\n","export class JsError {\n    constructor(\n        public type: 'JS http' | 'JS runtime',\n        public status_code: string,\n        public error: string,\n        public file?: string,\n        public line?: string,\n        public stacktrac?: string,\n    ) {}\n}\n","import { ErrorLoggingOptions } from './error-logging-options';\nimport { InjectionToken } from '@angular/core';\n\nexport const GLOBALS: InjectionToken<ErrorLoggingOptions> = new InjectionToken('Global config for error-logging');\n","import { Injectable, Optional, Inject } from '@angular/core';\nimport { HttpClient, HttpRequest, HttpErrorResponse } from '@angular/common/http';\nimport { LocationStrategy, PathLocationStrategy } from '@angular/common';\nimport * as StackTraceParser from 'error-stack-parser';\nimport { Observable } from 'rxjs';\n\nimport { ErrorLoggingOptions } from './error-logging-options';\nimport { GLOBALS } from './globals';\n\n@Injectable({\n    providedIn: 'root'\n})\n\nexport class ErrorLoggingService {\n\n    constructor(\n        @Optional() @Inject(GLOBALS) private globalConfig: ErrorLoggingOptions,\n        private httpClient: HttpClient,\n        private locationStrategy: LocationStrategy,\n    ) {}\n\n    buildError(error, req?: HttpRequest<any>) {\n\n        const appId = this.globalConfig.appId;\n        const env = this.globalConfig.environment;\n        const url = this.locationStrategy instanceof PathLocationStrategy ? this.locationStrategy.path() : 'Not applicable';\n        const statusCode = error instanceof HttpErrorResponse ? error.status.toString() : 'Not applicable';\n        const request = req ? JSON.stringify(req) : 'Not applicable';\n        const message = error.message || error.toString() || 'Not defined';\n        const stacktrace: any = error instanceof HttpErrorResponse ? 'No stack available' : StackTraceParser.parse(error);\n        const file = error instanceof HttpErrorResponse ? 'Not applicable' : stacktrace[0].fileName;\n        const line = error instanceof HttpErrorResponse ? 'Not applicable' : stacktrace[0].lineNumber;\n\n        const errorToSend = {\n            type: 'JS',\n            appId,\n            env,\n            url,\n            status_code: statusCode,\n            request,\n            error: message,\n            file,\n            line,\n            stacktrace: JSON.stringify(stacktrace),\n        };\n\n        this.reportError(errorToSend).subscribe();\n    }\n\n    reportError(error): Observable<any> {\n        return this.httpClient.post(this.globalConfig.endpoint, error, {\n            headers: {\n                'Authorization': 'Bearer ' + this.globalConfig.access_token\n            }\n        });\n    }\n}\n","import { ErrorHandler, Injectable, Injector } from '@angular/core';\nimport { HttpErrorResponse } from '@angular/common/http';\n\nimport { ErrorLoggingService } from './error-logging.service';\n\n// our global error handler\n@Injectable()\nexport class ErrorLoggingHandler extends ErrorHandler {\n\n    constructor(\n        private injector: Injector,\n    ) {\n        super();\n    }\n\n    handleError(error) {\n        if (!(error instanceof HttpErrorResponse)) {\n            const errorLoggingService = this.injector.get(ErrorLoggingService);\n            errorLoggingService.buildError(error);\n        }\n        super.handleError(error);\n    }\n\n}\n","import { Injectable, Inject, Optional } from '@angular/core';\nimport { HttpEvent, HttpInterceptor, HttpHandler, HttpRequest, HttpResponse, HttpErrorResponse } from '@angular/common/http';\nimport { Observable } from 'rxjs';\nimport { tap } from 'rxjs/operators';\n\nimport { ErrorLoggingService } from './error-logging.service';\nimport { ErrorLoggingOptions } from './error-logging-options';\nimport { GLOBALS } from './globals';\n\n/** Pass untouched request through to the next request handler. */\n@Injectable()\nexport class ErrorLoggingInterceptor implements HttpInterceptor {\n\n    constructor(\n        @Optional() @Inject(GLOBALS) private globalConfig: ErrorLoggingOptions,\n        private errorLoggingService: ErrorLoggingService,\n    ) {\n    }\n\n    intercept(req: HttpRequest<any>, next: HttpHandler): Observable<HttpEvent<any>> {\n        return next.handle(req)\n        .pipe(\n            tap(\n                // Succeeds when there is a response; ignore other events\n                (event: any) => {\n                    if (event instanceof HttpResponse && event.status !== 200 && event.status !== 401 && event.status !== 403 && req.url !== this.globalConfig.endpoint) {\n                        this.errorLoggingService.buildError(new Error(event.status + ' !== 200'), req);\n                    }\n                },\n                // Operation failed; error is an HttpErrorResponse\n                (error: HttpErrorResponse) => {\n\n                    if (req.url !== this.globalConfig.endpoint && error.status !== 401 && error.status !== 403) {\n                        this.errorLoggingService.buildError(error, req);\n                    }\n                }\n            )\n        );\n    }\n}\n","import { NgModule, ModuleWithProviders, ErrorHandler } from '@angular/core';\nimport { HTTP_INTERCEPTORS } from '@angular/common/http';\n\nimport { ErrorLoggingOptions } from './error-logging-options';\nimport { ErrorLoggingHandler } from './error-logging.handler';\nimport { ErrorLoggingInterceptor } from './error-logging.interceptor';\nimport { ErrorLoggingService } from './error-logging.service';\nimport { GLOBALS } from './globals';\n\n@NgModule({\n    imports: [],\n    declarations: [\n    ],\n    exports: [\n    ],\n    providers: [\n        { provide: ErrorHandler, useClass: ErrorLoggingHandler },\n        { provide: HTTP_INTERCEPTORS, useClass: ErrorLoggingInterceptor, multi: true },\n    ]\n})\nexport class ErrorLoggingModule {\n    static forRoot(globalOptions: ErrorLoggingOptions): ModuleWithProviders {\n        return {\n            ngModule: ErrorLoggingModule,\n            providers: [\n                ErrorLoggingService,\n                { provide: GLOBALS, useValue: globalOptions }\n            ]\n        };\n    }\n}\n"],"names":["StackTraceParser.parse"],"mappings":"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"}
